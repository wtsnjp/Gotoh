% ^^A -*- latex -*-
% \iffalse meta-comment
% 
% This is file 'gotoh.dtx'.
% 
% Copyright (c) 2017 Takuto ASAKURA (wtsnjp)
%   GitHub:   https://github.com/wtsnjp
%   Twitter:  @wtsnjp
% 
% This package is distributed under the MIT License.
% 
% \fi
%
% \CheckSum{0}
%
% \changes{v0.1}{2017/04/22}{Develop version}
% 
% \iffalse
%<*package>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{gotoh}[2017/04/22 v0.1 Sequence alignment algorithm]
%</package>
%<*driver>
\documentclass[draft]{ltxdoc}
\usepackage{enumitem}
\usepackage{gotoh}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\setlength\hfuzz{15pt}
\hbadness=7000
\newcommand{\pkgName}[1]{\textsf{#1}}
\newcommand{\pkgGotoh}{\pkgName{Gotoh}}
\newcommand{\synKey}[1]{\texttt{#1}}
\newcommand{\synOr}{\quad or\quad}
\newcommand{\synBool}{\meta{\normalfont\texttt{true\textbar false}}}
\setlist[description]{font={\normalfont}}
\begin{document}
\DocInput{gotoh.dtx}
\end{document}
%</driver>
% \fi
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \GetFileInfo{gotoh.sty}
%
% \title{The {\pkgGotoh} package}
% \author{Takuto ASAKURA (wtsnjp)}
% \date{{\fileversion} [\filedate]}
% \maketitle
%
% \MakeShortVerb{\|}
%
% \begin{abstract}
% This package is an implementation in {\TeX} of the Gotoh algorithm, which
% calculates sequence alignment. The package provides only two commands:
% |\Gotoh| for executing the algorithm and |\GotohConfig| for setting various
% parameters with a key-value list.
% \end{abstract}
%
% ^^A\tableofcontents
%
% \section{System Requirements}
%
% System requirements of {\pkgGotoh} are shown bellow.
% \begin{itemize}
% \item {\TeX} engine: any engine
% \item {\TeX} format: {\LaTeXe}
% \item Document class: any class
% \item Required package: \pkgName{xkeyval}
% \end{itemize}
%
% \section{Loading the {\pkgGotoh} Package}
%
% To use {\pkgGotoh} package, load |gotoh.sty| with |\usepackage| command in
% preamble. No package option is available.
% \begin{quote}
% |\usepackage{gotoh}|
% \end{quote}
%
% \section{Execute the Gotoh Algorithm}
%
% \DescribeMacro{\Gotoh}
% The |\Gotoh| command simply takes two sequences as its arguments.
% \begin{quote}
% |\Gotoh|\marg{sequence A}\marg{sequence B}
% \end{quote}
% The command puts the optimal score of alignment to specified control sequence
% (default: |\GotohScore|) after executing the Gotoh algorithm, and returns the
% alignment results to other control sequences (default: |\GotohResultA| and
% |\GotohResultB|). Note that these assignments are done globally. The control
% sequences to store the score and results can be changed with |\GotohConfig|
% command.
%
% \section{Configuration}
%
% \DescribeMacro{\GotohConfig}
% You can change various settings and parameters related to this package with
% |\GotohConfig| command. The command takes a key-value list of the settings as
% its argument and changes the values locally.
% \begin{quote}
% |\GotohConfig|\marg{key-value list}
% \end{quote}
%
% \subsection{Control Sequences to Store Results}
%
% \DescribeMacro{\GotohScore}
% \DescribeMacro{\GotohResultA}
% \DescribeMacro{\GotohResultB}
% Control sequences which |\Gotoh| command return results can be specified with
% following keys:
%
% \begin{description}
% \item[\synKey{score} |=| \meta{control sequence}]\hfill |\GotohScore| \\
%   sets the control sequence to store optimal score of the last alignment
%   which calculated by |\Gotoh| command.
% \item[\synKey{result A} |=| \meta{control sequence}]\hfill |\GotohResultA|
% \item[\synKey{result B} |=| \meta{control sequence}]\hfill |\GotohResultB| \\
%   specify the control sequences to store alignment results respectively
%   corresponding to \meta{sequence A} and \meta{sequence B} of |\Gotoh|.
% \end{description}
%
% \subsection{Algorithm Parameters}
%
% The default value of algorithm parameters which define the scoring are
% \begin{equation}
% \mathrm{match} = 1,\; \mathrm{mismatch} = -1,\; d = 7,\; e= 1.
% \label{eq:parameters}
% \end{equation}
% Parameters $\mathrm{match}, \mathrm{mismatch}$ define the penalties of a
% \emph{match} and \emph{mismatch} respectively, and $d, e$ are used in gap
% penalty (see section \ref{subsect:calc}). The parameters appeared in the
% above equation are able to be changed with following keys:
%
% \begin{description}
% \item[\synKey{match} |=| \meta{number}]\hfill |1|
% \item[\synKey{mismatch} |=| \meta{number}]\hfill |-1|
% \item[\synKey{d} |=| \meta{number}]\hfill |7|
% \item[\synKey{e} |=| \meta{number}]\hfill |1| \\
%   set the parameters appear in the above equation.
% \end{description}
%
% Though the |\Gotoh| command calculates sequence alignment with standard
% dynamic programming as default, you can use memoization functions instead.
% Note that both of the methods produce exactly the same results.
%
% \begin{description}
% \item[\synKey{memoization} |=| \synBool \synOr \synKey{memoization}]\hfill |false| \\
%   If true, use memoization functions to execute the Gotoh algorithm. 
% \end{description}
%
% \subsection{Others}
%
% \begin{description}
% \item[\synKey{gap char} |=| \meta{character}]\hfill |.| (period) \\
%   is inserted to the alignment results where gaps appear. Note that you have
%   to be careful to use |-| (hyphen) as gap character because successive
%   hyphens automatically converted to dashes by {\TeX}. In this case, you can
%   specify |\mbox{-}|.
% \item[\synKey{uppercase} |=| \synBool \synOr \synKey{uppercase}]\hfill |false| \\
%   If true, uppercase both \meta{sequence A} and \meta{sequence B} before
%   executing the algorithm.
% \end{description}
%
% \StopEventually{\PrintIndex\PrintChanges}
%
% \section{Algorithm and Implementation}
%
% \subsection{Required package}
%
% Package \pkgName{xkeyval} is required to process key-value lists.
%    \begin{macrocode}
\RequirePackage{xkeyval}
%    \end{macrocode}
%
% \subsection{Messages}
%
% \begin{macro}{\gth@warn}
% \begin{macro}{\gth@error}
% Commands for warning and error messages.
%    \begin{macrocode}
\def\gth@pkgname{gotoh}
\def\gth@warn{\PackageWarningNoLine\gth@pkgname}
\def\gth@error{\PackageError\gth@pkgname}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Switches, Registers and Constants}
%
% All boolean switches, count registers and dimen registers used by this
% package are declared here.
%
% \begin{macro}{\if@gth@first@}
% \begin{macro}{\if@gth@renain@}
% \begin{macro}{\if@gth@gap@}
% \begin{macro}{\if@gth@gapx@}
% \begin{macro}{\if@gth@gapy@}
% A switch |\if@gth@first@| is for a calculation command |\gth@max|, and the
% other switches are for trace back (in macro |\gth@gotoh|).
%    \begin{macrocode}
\newif\if@gth@first@
\newif\if@gth@remain@
\newif\if@gth@gap@
\newif\if@gth@gapx@
\newif\if@gth@gapy@
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\gth@tempcnta}
% \begin{macro}{\gth@tempcntb}
% \begin{macro}{\gth@tempcntc}
% \begin{macro}{\gth@tempcntd}
% \begin{macro}{\gth@calc}
% Scratch four count registers for general use and one for some calculation
% routines.
%    \begin{macrocode}
\newcount\gth@tempcnta
\newcount\gth@tempcntb
\newcount\gth@tempcntc
\newcount\gth@tempcntd
\newcount\gth@calc
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\gth@sn}
% This is \emph{not} a counter register but a macro to store \meta{number}
% which is used as `serial number'.
%    \begin{macrocode}
\edef\gth@sn{\number\z@}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\gth@min}
% This macro stores a large negative \meta{number} which is used instead of
% $-\infty$. Here |\gth@M| is a largest constant which can be defined by
% |\mathchardef| primitive (in traditional {\TeX} engine).
%    \begin{macrocode}
\mathchardef\gth@M="7FFF
\edef\gth@min{-\number\gth@M}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\gth@tempdima}
% Scratch a dimen register for general use.
%    \begin{macrocode}
\newdimen\gth@tempdima
%    \end{macrocode}
% \end{macro}
%
% \subsection{Defining and Setting Keys}
%
% \begin{macro}{\gth@match}
% \begin{macro}{\gth@mismatch}
% \begin{macro}{\gth@d}
% \begin{macro}{\gth@e}
% These are keys for setting the parameters of the algorithm. The default
% values which are shown in equation (\ref{eq:parameters}) are set here, and
% stored in the macros (\emph{not} count registers) respectively.
%    \begin{macrocode}
\define@cmdkeys[gth]{config}[gth@]{match, mismatch, d, e}
\setkeys[gth]{config}{match=1, mismatch=-1, d=7, e=1}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\gth@score}
% \begin{macro}{\gth@resulta}
% \begin{macro}{\gth@resultb}
% The macros to store the result of the algorithms are also stored in internal
% macros.
%    \begin{macrocode}
\define@key[gth]{config}{score}{\def\gth@score{#1}}
\define@key[gth]{config}{result A}{\def\gth@resulta{#1}}
\define@key[gth]{config}{result B}{\def\gth@resultb{#1}}
\setkeys[gth]{config}{
  score=\GotohScore, result A=\GotohResultA, result B=\GotohResultB}  
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\if@gth@memoization}
% \begin{macro}{\if@gth@uppercase}
% \begin{macro}{\gth@gap@char}
% Both boolean keys |\if@gth@memoization| and |\if@gth@uppercase| are set false
% as default. The gap char is stored in |\gth@gap@char|.
%    \begin{macrocode}
\define@boolkeys[gth]{config}[@gth@]{memoization, uppercase}[true]
\define@key[gth]{config}{gap char}{\def\gth@gap@char{#1}}
\setkeys[gth]{config}{memoization=false, uppercase=false, gap char={.}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Utility Commands}
%
% \begin{macro}{\gth@nameuse}
% \begin{macro}{\gth@name@edef}
% \begin{macro}{\gth@name@xdef}
% \begin{macro}{\gth@glet}
% Some primitives to use, define or copy control sequences are wrapped.
%    \begin{macrocode}
\def\gth@nameuse#1{\csname gth@#1\endcsname}
\def\gth@name@edef#1{\expandafter\edef\csname gth@#1\endcsname}
\def\gth@name@xdef#1{\expandafter\xdef\csname gth@#1\endcsname}
\def\gth@glet{\global\let}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\gth@advance}
% \begin{macro}{\gth@increment}
% \begin{macro}{\gth@decrement}
% Commands to treate macros which store \meta{number} like count registers.
%    \begin{macrocode}
\def\gth@advance#1#2{%
  \gth@calc#1\advance\gth@calc#2\edef#1{\the\gth@calc}}
\def\gth@increment#1{\gth@advance#1\@ne}
\def\gth@decrement#1{\gth@advance#1\m@ne}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Calculation Routines}\label{subsect:calc}
%
% Since these calculation routines (macros) are \emph{not fullexpandable}, all
% commands defined here return the results by storing the value in the counter
% register |\gth@calc|. This assignments are done locally.
%
% \begin{macro}{\gth@max}
% This command take comma-separated list of \meta{number} and returns the max
% value of them.
%    \begin{macrocode}
\def\gth@max#1{%
  \@gth@first@true
  \@for\gth@member:=#1\do{%
    \if@gth@first@
      \gth@calc\gth@member
      \@gth@first@false
    \else
      \ifnum\gth@member>\gth@calc
        \gth@calc\gth@member
      \fi
    \fi}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\gth@gap@penalty}
% This command takes $n$, the length of a \emph{gap}, as its argument and
% calculates its penalty which defined by following function\footnote{This form
% of gap penalty is called `Affine gaps'.}:
% \begin{equation}
% g(n) = -d - (n-1)e. \label{eq:gap}
% \end{equation}
%    \begin{macrocode}
\def\gth@gap@penalty#1{%
  \gth@calc#1\relax
  \advance\gth@calc\m@ne
  \multiply\gth@calc-\gth@e
  \advance\gth@calc-\gth@d}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Printing Matrixes}
%
% \begin{macro}{\gth@print@matrix}
% This command shows the matrixes $M$, $I_x$ or $I_y$. Currently, this macro is
% only for the author of this package to debug.
%    \begin{macrocode}
\def\gth@tab#1{%
  \bgroup
    \sbox\z@ 0%
    \expandafter\gth@tempdima\ht\z@
    \multiply\gth@tempdima 8%
    \mbox{\hbox to\gth@tempdima{\hss #1}}%
  \egroup}
\def\gth@print@matrix#1{%
  \bgroup\texttt
    #1:\\
    \gth@tempcnta\z@
    \@whilenum\gth@tempcnta<\gth@x\do{%
      \gth@tempcntb\z@
      \@whilenum\gth@tempcntb<\gth@y\do{%
        \gth@tab{%
          \gth@nameuse{\gth@sn @#1@\the\gth@tempcnta
                    @\the\gth@tempcntb}}%
      \advance\gth@tempcntb\@ne}\\
    \advance\gth@tempcnta\@ne}%
  \egroup}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Execute the Gotoh Algorithm}
%
%    \begin{macrocode}
\newcommand{\Gotoh}[2]{%
  \if@gth@uppercase
    \uppercase{\gth@gotoh{#1}{#2}}%
  \else
    \gth@gotoh{#1}{#2}%
  \fi}
\def\gth@gotoh#1#2{% #1: seq1, #2: seq2
  \gth@increment\gth@sn
  \bgroup
    %% get sequences
    \gth@tempcnta\z@
    \@tfor\gth@member:=#1\do{%
      \gth@name@edef{seq1@\the\gth@tempcnta}{\gth@member}%
      \advance\gth@tempcnta\@ne}%
    \advance\gth@tempcnta\@ne
    \edef\gth@x{\the\gth@tempcnta}%
    \gth@tempcntb\z@
    \@tfor\gth@member:=#2\do{%
      \gth@name@edef{seq2@\the\gth@tempcntb}{\gth@member}%
      \advance\gth@tempcntb\@ne}%
    \advance\gth@tempcntb\@ne
    \edef\gth@y{\the\gth@tempcntb}%
    %% initialize matrix
    \gth@tempcnta\z@
    \@whilenum\gth@tempcnta<\gth@x\do{%
      \gth@gap@penalty{\gth@tempcnta}%
      \gth@name@xdef{\gth@sn @m@\the\gth@tempcnta
                     @\number\z@}{\gth@min}%
      \gth@name@xdef{\gth@sn @ix@\the\gth@tempcnta
                     @\number\z@}{\the\gth@calc}%
      \gth@name@xdef{\gth@sn @iy@\the\gth@tempcnta
                     @\number\z@}{\gth@min}%
      \advance\gth@tempcnta\@ne}%
    \gth@tempcntb\z@
    \@whilenum\gth@tempcntb<\gth@y\do{%
      \gth@gap@penalty{\gth@tempcntb}%
      \gth@name@xdef{\gth@sn @m@\number\z@
                     @\the\gth@tempcntb}{\gth@min}%
      \gth@name@xdef{\gth@sn @ix@\number\z@
                     @\the\gth@tempcntb}{\gth@min}%
      \gth@name@xdef{\gth@sn @iy@\number\z@
                     @\the\gth@tempcntb}{\the\gth@calc}%
      \advance\gth@tempcntb\@ne}%
    \gth@name@xdef{\gth@sn @m@\number\z@
                   @\number\z@}{\number\z@}%
    %% fill matrix
    \if@gth@memoization
      % memoization
      \gth@decrement\gth@x \gth@decrement\gth@y
        \gth@memo@ix{\gth@x}{\gth@y}%
        \gth@memo@iy{\gth@x}{\gth@y}%
        \gth@memo@m{\gth@x}{\gth@y}%
      \gth@increment\gth@x \gth@increment\gth@y
    \else
      % standard dp
      \gth@tempcnta\@ne
      \@whilenum\gth@tempcnta<\gth@x\do{%
        \gth@tempcntb\@ne
        \@whilenum\gth@tempcntb<\gth@y\do{%
          % ix
          \advance\gth@tempcnta\m@ne
            \gth@max{%
              \gth@nameuse{\gth@sn @m@\the\gth@tempcnta
                        @\the\gth@tempcntb},%
              \gth@nameuse{\gth@sn @iy@\the\gth@tempcnta
                        @\the\gth@tempcntb}}%
            \gth@tempcntc\gth@calc
            \gth@tempcntd
              \gth@nameuse{\gth@sn @ix@\the\gth@tempcnta
                        @\the\gth@tempcntb}%
            \advance\gth@tempcntc-\gth@d\advance\gth@tempcntd-\gth@e
          \advance\gth@tempcnta\@ne
          \gth@max{\gth@tempcntc,\gth@tempcntd}%
          \gth@name@xdef{\gth@sn @ix@\the\gth@tempcnta
                         @\the\gth@tempcntb}{%
            \the\gth@calc}%
          % iy
          \advance\gth@tempcntb\m@ne
            \gth@tempcntc
              \gth@nameuse{\gth@sn @m@\the\gth@tempcnta
                        @\the\gth@tempcntb}%
            \gth@tempcntd
              \gth@nameuse{\gth@sn @iy@\the\gth@tempcnta
                        @\the\gth@tempcntb}%
            \advance\gth@tempcntc-\gth@d\advance\gth@tempcntd-\gth@e
          \advance\gth@tempcntb\@ne
          \gth@max{\gth@tempcntc,\gth@tempcntd}%
          \gth@name@xdef{\gth@sn @iy@\the\gth@tempcnta
                         @\the\gth@tempcntb}{%
            \the\gth@calc}%
          % m
          \advance\gth@tempcnta\m@ne\advance\gth@tempcntb\m@ne
            \gth@max{%
              \gth@nameuse{\gth@sn @m@\the\gth@tempcnta
                        @\the\gth@tempcntb},%
              \gth@nameuse{\gth@sn @ix@\the\gth@tempcnta
                        @\the\gth@tempcntb},%
              \gth@nameuse{\gth@sn @iy@\the\gth@tempcnta
                        @\the\gth@tempcntb}}%
            \edef\gth@tmpa{\gth@nameuse{seq1@\the\gth@tempcnta}}%
            \edef\gth@tmpb{\gth@nameuse{seq2@\the\gth@tempcntb}}%
          \advance\gth@tempcnta\@ne\advance\gth@tempcntb\@ne
          \ifx\gth@tmpa\gth@tmpb
            \advance\gth@calc\gth@match
          \else
            \advance\gth@calc\gth@mismatch
          \fi
          \gth@name@xdef{\gth@sn @m@\the\gth@tempcnta
                         @\the\gth@tempcntb}{%
            \the\gth@calc}%
          \advance\gth@tempcntb\@ne}%
        \advance\gth@tempcnta\@ne}%
    \fi
    %% print matrix
    %\gth@print@matrix{m}%
    %\gth@print@matrix{ix}%
    %\gth@print@matrix{iy}%
    %% return score
    \bgroup
      \gth@decrement\gth@x \gth@decrement\gth@y
      \expandafter\xdef\gth@score{%
        \gth@nameuse{\gth@sn @m@\gth@x @\gth@y}}%
    \egroup
    %% trace back
    \let\gth@rseq@x\@empty\let\gth@rseq@y\@empty\let\gth@mode@seq\@empty
    \@gth@remain@true\@gth@gapx@false\@gth@gapy@false
    \@whilesw\if@gth@remain@\fi{%
      \ifnum\gth@x=\z@
        \gth@decrement\gth@y
        \expandafter\expandafter\expandafter
        \ifx\gth@nameuse{seq2@\gth@y}\relax\else
          \edef\gth@rseq@x{\gth@gap@char\gth@rseq@x}%
          \edef\gth@rseq@y{\gth@nameuse{seq2@\gth@y}%
                           \gth@rseq@y}%
        \fi
      \else\ifnum\gth@y=\z@
        \gth@decrement\gth@x
        \expandafter\expandafter\expandafter
        \ifx\gth@nameuse{seq1@\gth@x}\relax\else
          \edef\gth@rseq@x{\gth@nameuse{seq1@\gth@x}%
                           \gth@rseq@x}%
          \edef\gth@rseq@y{\gth@gap@char\gth@rseq@y}%
        \fi
      \else
        \if@gth@gapx@
          % mode: gap x
          \gth@decrement\gth@x
          \expandafter\expandafter\expandafter
          \ifx\gth@nameuse{seq1@\gth@x}\relax\else
            \edef\gth@rseq@x{\gth@nameuse{seq1@\gth@x}%
                             \gth@rseq@x}%
            \edef\gth@rseq@y{\gth@gap@char\gth@rseq@y}%
          \fi
          \gth@tempcnta\gth@nameuse{\gth@sn @m@\gth@x @\gth@y}%
          \gth@tempcntb\gth@nameuse{\gth@sn @ix@\gth@x @\gth@y}%
          \gth@tempcntc\gth@nameuse{\gth@sn @iy@\gth@x @\gth@y}%
          \advance\gth@tempcnta-\gth@d
          \advance\gth@tempcntb-\gth@e
          \advance\gth@tempcntc-\gth@d
          \ifnum\gth@tempcnta>\gth@tempcntb
            \@gth@gapx@false
          \else\ifnum\gth@tempcntb<\gth@tempcntc
            \@gth@gapx@false\@gth@gapy@true
          \fi\fi
        \else\if@gth@gapy@
          % mode: gap y
          \gth@decrement\gth@y
          \expandafter\expandafter\expandafter
          \ifx\gth@nameuse{seq2@\gth@y}\relax\else
            \edef\gth@rseq@x{\gth@gap@char\gth@rseq@x}%
            \edef\gth@rseq@y{\gth@nameuse{seq2@\gth@y}%
                             \gth@rseq@y}%
          \fi
          \gth@tempcnta\gth@nameuse{\gth@sn @m@\gth@x @\gth@y}%
          \gth@tempcntb\gth@nameuse{\gth@sn @iy@\gth@x @\gth@y}%
          \advance\gth@tempcnta-\gth@d\advance\gth@tempcntb-\gth@e
          \ifnum\gth@tempcnta>\gth@tempcntb
            \@gth@gapy@false
          \fi
        \else
          % mode: default
          \gth@decrement\gth@x
          \gth@decrement\gth@y
          \expandafter\expandafter\expandafter
          \ifx\gth@nameuse{seq1@\gth@x}\relax\else
            \expandafter\expandafter\expandafter
            \ifx\gth@nameuse{seq2@\gth@y}\relax\else
              \edef\gth@rseq@x{\gth@nameuse{seq1@\gth@x}%
                               \gth@rseq@x}%
              \edef\gth@rseq@y{\gth@nameuse{seq2@\gth@y}%
                               \gth@rseq@y}%
            \fi
          \fi
          \gth@tempcnta\gth@nameuse{\gth@sn @m@\gth@x @\gth@y}%
          \gth@tempcntb\gth@nameuse{\gth@sn @ix@\gth@x @\gth@y}%
          \gth@tempcntc\gth@nameuse{\gth@sn @iy@\gth@x @\gth@y}%
          \@gth@gap@false
          \ifnum\gth@tempcnta<\gth@tempcntb\@gth@gap@true\fi
          \ifnum\gth@tempcnta<\gth@tempcntc\@gth@gap@true\fi
          \if@gth@gap@
            \ifnum\gth@tempcntb>\gth@tempcntc
              \@gth@gapx@true
            \else
              \@gth@gapy@true
            \fi
          \fi
        \fi\fi
      \fi\fi
      \ifnum\gth@x<\@ne\ifnum\gth@y<\@ne
        \@gth@remain@false
      \fi\fi}%
    % return results
    \expandafter\gth@glet\gth@resulta\gth@rseq@x
    \expandafter\gth@glet\gth@resultb\gth@rseq@y
  \egroup}
%    \end{macrocode}
%
% \subsection{Memoization Functions}
%
%    \begin{macrocode}
\def\gth@memo@ix#1#2{%
  \bgroup
    \gth@tempcnta#1\gth@tempcntb#2\relax
    \expandafter\expandafter\expandafter
    \ifx\gth@nameuse{\gth@sn @ix@\the\gth@tempcnta
                  @\the\gth@tempcntb}\relax
      \advance\gth@tempcnta\m@ne
        \gth@memo@ix{\gth@tempcnta}{\gth@tempcntb}%
        \edef\gth@tmp@ix@return{\gth@ix@return}%
        \gth@memo@iy{\gth@tempcnta}{\gth@tempcntb}%
        \edef\gth@tmp@iy@return{\gth@iy@return}%
        \gth@memo@m{\gth@tempcnta}{\gth@tempcntb}%
      \advance\gth@tempcnta\@ne
      \gth@advance{\gth@m@return}{-\gth@d}%
      \gth@advance{\gth@tmp@ix@return}{-\gth@e}%
      \gth@advance{\gth@tmp@iy@return}{-\gth@d}%
      \gth@max{\gth@m@return,\gth@tmp@ix@return,\gth@tmp@iy@return}%
      \gth@name@xdef{\gth@sn @ix@\the\gth@tempcnta
                     @\the\gth@tempcntb}{%
        \the\gth@calc}%
      \xdef\gth@ix@return{\the\gth@calc}
    \else
      \xdef\gth@ix@return{%
        \gth@nameuse{\gth@sn @ix@\the\gth@tempcnta @\the\gth@tempcntb}}
    \fi
  \egroup}
\def\gth@memo@iy#1#2{%
  \bgroup
    \gth@tempcnta#1\gth@tempcntb#2\relax
    \expandafter\expandafter\expandafter
    \ifx\gth@nameuse{\gth@sn @iy@\the\gth@tempcnta
                  @\the\gth@tempcntb}\relax
      \advance\gth@tempcntb\m@ne
        \gth@memo@iy{\gth@tempcnta}{\gth@tempcntb}%
        \edef\gth@tmp@iy@return{\gth@iy@return}%
        \gth@memo@m{\gth@tempcnta}{\gth@tempcntb}%
      \advance\gth@tempcntb\@ne
      \gth@advance{\gth@m@return}{-\gth@d}%
      \gth@advance{\gth@tmp@iy@return}{-\gth@e}%
      \gth@max{\gth@m@return,\gth@tmp@iy@return}%
      \gth@name@xdef{\gth@sn @iy@\the\gth@tempcnta
                     @\the\gth@tempcntb}{%
        \the\gth@calc}%
      \xdef\gth@iy@return{\the\gth@calc}%
    \else
      \xdef\gth@iy@return{%
        \gth@nameuse{\gth@sn @iy@\the\gth@tempcnta @\the\gth@tempcntb}}
    \fi
  \egroup}
\def\gth@memo@m#1#2{%
  \bgroup
    \gth@tempcnta#1\gth@tempcntb#2\relax
    \expandafter\expandafter\expandafter
    \ifx\gth@nameuse{\gth@sn @m@\the\gth@tempcnta
                  @\the\gth@tempcntb}\relax
      \advance\gth@tempcnta\m@ne\advance\gth@tempcntb\m@ne
        \gth@memo@ix{\gth@tempcnta}{\gth@tempcntb}%
        \edef\gth@tmp@ix@return{\gth@ix@return}%
        \gth@memo@iy{\gth@tempcnta}{\gth@tempcntb}%
        \edef\gth@tmp@iy@return{\gth@iy@return}%
        \gth@memo@m{\gth@tempcnta}{\gth@tempcntb}%
        \edef\gth@tmpa{\gth@nameuse{seq1@\the\gth@tempcnta}}%
        \edef\gth@tmpb{\gth@nameuse{seq2@\the\gth@tempcntb}}%
      \advance\gth@tempcnta\@ne\advance\gth@tempcntb\@ne
      \gth@max{\gth@m@return,\gth@tmp@ix@return,\gth@tmp@iy@return}%
      \ifx\gth@tmpa\gth@tmpb
        \advance\gth@calc\gth@match
      \else
        \advance\gth@calc\gth@mismatch
      \fi
      \gth@name@xdef{\gth@sn @m@\the\gth@tempcnta
                     @\the\gth@tempcntb}{%
        \the\gth@calc}%
      \xdef\gth@m@return{\the\gth@calc}%
    \else
      \xdef\gth@m@return{%
        \gth@nameuse{\gth@sn @m@\the\gth@tempcnta @\the\gth@tempcntb}}
    \fi
  \egroup}
%    \end{macrocode}
%
% \subsection{Config Command}
%    \begin{macrocode}
\newcommand{\GotohConfig}[1]{\setkeys[gth]{config}{#1}}
%    \end{macrocode}
%
% \Finale
%
\endinput
% EOF
